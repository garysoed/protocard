import GeneratorGulp from './generator-gulp';

let File = require('gulp-util').File;

describe('GeneratorGulp', () => {
  let fakeGenerator;
  let generatorGulp;

  beforeEach(() => {
    fakeGenerator = jasmine.createSpyObj('generator', ['generate', 'resolve']);
    generatorGulp = new GeneratorGulp({}, fakeGenerator);
  });

  describe('generate', () => {
    it('should push all the files generated by generate', done => {
      let outName = 'outName';
      let localDataList = [{}];
      let generatedFiles = { file1: 'content1', file2: 'content2' };
      let templateFileContent = 'content';
      fakeGenerator.generate.and.returnValue(generatedFiles);

      let stream = generatorGulp.generate(outName, localDataList);
      let outputData = [];
      stream.on('data', file => {
        outputData.push(file);
      });
      stream.once('finish', () => {
        expect(fakeGenerator.generate)
            .toHaveBeenCalledWith(templateFileContent, outName, localDataList);
        expect(outputData[0].path).toEqual('file1');
        expect(outputData[0].contents.toString()).toEqual('content1');
        expect(outputData[1].path).toEqual('file2');
        expect(outputData[1].contents.toString()).toEqual('content2');
        done();
      });
      stream.write(new File({ contents: new Buffer(templateFileContent) }));
      stream.end();
    });
  });

  describe('resolve', () => {
    it('should resolve the incoming files', done => {
      let content = 'content';
      let out = 'output';

      fakeGenerator.resolve.and.returnValue(out);

      let stream = generatorGulp.resolve();
      stream.on('data', file => {
        expect(fakeGenerator.resolve).toHaveBeenCalledWith(content);
        expect(file.contents.toString()).toEqual(out);
        done();
      });
      stream.write(new File({ contents: new Buffer(content) }));
    });

    it('should skip files with no contents', () => {
      let stream = generatorGulp.resolve();
      stream.write(new File());
    });
  });
});
