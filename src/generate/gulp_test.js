import { _provider } from './gulp';

let File = require('gulp-util').File;

describe('gulp-generate', () => {
  let fakeGenerate;
  let gulpGenerate;

  beforeEach(() => {
    fakeGenerate = jasmine.createSpy('generate');
    gulpGenerate = _provider.bind(null, fakeGenerate);
  });

  it('should copy all the files passed in', done => {
    let file1 = new File({ contents: new Buffer('a') });
    let file2 = new File({ contents: new Buffer('b') });
    fakeGenerate.and.returnValue([]);

    let stream = gulpGenerate('templatePath', 'outName', []);
    let outputData = [];
    stream.on('data', file => {
      outputData.push(file);
    });
    stream.once('finish', () => {
      expect(outputData).toEqual([file1, file2]);
      done();
    });
    stream.write(file1);
    stream.write(file2);
    stream.end();
  });

  it('should push all the files generated by generate', done => {
    let templatePath = 'templatePath';
    let outName = 'outName';
    let localDataList = [{}];
    let generatedFiles = { file1: 'content1', file2: 'content2' };
    fakeGenerate.and.returnValue(generatedFiles);

    let stream = gulpGenerate(templatePath, outName, localDataList);
    let outputData = [];
    stream.on('data', file => {
      outputData.push(file);
    });
    stream.once('finish', () => {
      expect(outputData[0].path).toEqual('file1');
      expect(outputData[0].contents.toString()).toEqual('content1');
      expect(outputData[1].path).toEqual('file2');
      expect(outputData[1].contents.toString()).toEqual('content2');
      done();
    });
    stream.end();
  });
});
